{"contents":[{"data":{"text":"ReactiveCocoa（其简称为RAC）是由Github 开源的一个应用于iOS和OS X开发的新框架。RAC具有函数式编程和响应式编程的特性。它主要吸取了.Net的 Reactive Extensions的设计和实现。本文将详细介绍该框架试图解决什么问题，以及其用法与特点。","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031127},{"data":{"text":"ReactiveCocoa试图解决什么问题","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":true,"t_indent":true}},"type":"headline","id":46031128},{"data":{"text":"1. 经过一段时间的研究，我认为ReactiveCocoa试图解决以下3个问题：","format":{"p_indent":true,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031129},{"data":{"text":"2. 传统iOS开发过程中，状态以及状态之间依赖过多的问题","format":{"p_indent":true,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031130},{"data":{"text":"3. 传统MVC架构的问题：Controller比较复杂，可测试性差","format":{"p_indent":true,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031131},{"data":{"text":"提供统一的消息传递机制","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":true,"t_indent":true}},"type":"headline","id":46031132},{"data":{"text":"传统iOS开发过程中，状态以及状态之间依赖过多的问题","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031133},{"data":{"text":"我们在开发iOS应用时，一个界面元素的状态很可能受多个其它界面元素或后台状态的影响。","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031134},{"data":{"text":"例如，在用户帐户的登录界面，通常会有2个输入框（分别输入帐号和密码）和一个登录按钮。如果我们要加入一个限制条件：当用户输入完帐号和密码，并且登录的网络请求还未发出时，确定按钮才可以点击。通常情况下，我们需要监听这两个输入框的状态变化以及登录的网络请求状态，然后修改另一个控件的enabled状态。","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031135},{"data":{"text":"传统的写法如下（该示例代码修改自ReactiveCocoa官网 ）：","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46044061},{"data":{"text":"static void *ObservationContext = &ObservationContext;\n(void)viewDidLoad {\n    [super viewDidLoad];\n    \n    [LoginManager.sharedManager addObserver:self\n             forKeyPath:@\"loggingIn\"\n                                    options:NSKeyValueObservingOptionInitial\n             context:&ObservationContext];\n    [self.usernameTextField addTarget:self action:@selector(updateLogInButton)\n             forControlEvents:UIControlEventEditingChanged];\n    [self.passwordTextField addTarget:self action:@selector(updateLogInButton)\n            forControlEvents:UIControlEventEditingChanged];\n}\n\n- (void)updateLogInButton {\n    BOOL textFieldsNonEmpty = self.usernameTextField.text.length > 0 \n&& self.passwordTextField.text.length > 0;\n    BOOL readyToLogIn = !LoginManager.sharedManager.isLoggingIn && !self.loggedIn;\n    self.logInButton.enabled = textFieldsNonEmpty && readyToLogIn;\n}\n\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object\n                        change:(NSDictionary *)change context:(void *)context {\n    if (context == ObservationContext) {\n        [self updateLogInButton];\n    } else {\n        [super observeValueForKeyPath:keyPath ofObject:object\n                               change:change context:context];\n    }\n}","language":"objectivec","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"code","id":46044062},{"data":{"text":"RAC通过引入信号（Signal）的概念，来代替传统iOS开发中对于控件状态变化检查的代理（delegate）模式或target-action模式。因为RAC的信号是可以组合（combine）的，所以可以轻松地构造出另一个新的信号出来，然后将按钮的enabled状态与新的信号绑定。如下所示：","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031136},{"data":{"text":"RAC(self.logInButton, enabled) = [RACSignal\n    combineLatest:@[\n        self.usernameTextField.rac_textSignal,\n        self.passwordTextField.rac_textSignal,\n        RACObserve(LoginManager.sharedManager, loggingIn),\n        RACObserve(self, loggedIn)\n    ] reduce:^(NSString *username, NSString *password, NSNumber *\nloggingIn, NSNumber *loggedIn) {\n        return @(username.length > 0 && password.length > 0 && !\nloggingIn.boolValue && !loggedIn.boolValue);\n    }];","language":"objectivec","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"code","id":46044063},{"data":{"text":"可以看到，在引入RAC之后，以前散落在action-target或KVO的回调函数中的判断逻辑被统一到了一起，从而使得登录按钮的enabled状态被更加清晰地表达了出来。","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031138},{"data":{"text":"除了组合（combine）之外，RAC的信号还支持链式（chaining）和过滤（filter)，以方便将信号进行进一步处理。","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031139},{"data":{"text":"试图解决MVC框架的问题","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":true,"t_indent":true}},"type":"headline","id":46031140},{"data":{"text":"对于传统的Model-View-Controller的框架，Controller很容易变得比较庞大和复杂。由于Controller承担了Model和View之间的桥梁作用，所以Controller常常与对应的View和Model的耦合度非常高，这同时也造成对其做单元测试非常不容易，对iOS工程的单元测试大多都只在一些工具类或与界面无关的逻辑类中进行。","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031141},{"data":{"text":"RAC的信号机制很容易将某一个Model变量的变化与界面关联，所以非常容易应用Model-View-ViewModel 框架。通过引入ViewModel层，然后用RAC将ViewModel与View关联，View层的变化可以直接响应ViewModel层的变化，这使得Controller变得更加简单，由于View不再与Model绑定，也增加了View的可重用性。","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031142},{"data":{"text":"因为引入了ViewModel层，所以单元测试可以在ViewModel层进行，iOS工程的可测试性也大大增强了。InfoQ也曾撰文介绍过MVVM：《MVVM启示录》 。","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031143},{"data":{"text":"统一消息传递机制","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":true,"t_indent":true}},"type":"headline","id":46031144},{"data":{"text":"iOS开发中有着各种消息传递机制，包括KVO、Notification、delegation、block以及target-action方式。各种消息传递机制使得开发者在做具体选择时感到困惑，例如在objc.io上就有专门撰文（破船的翻译 ），介绍各种消息传递机制之间的差异性。","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031145},{"data":{"text":"RAC将传统的UI控件事件进行了封装，使得以上各种消息传递机制都可以用RAC来完成。示例代码如下：","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031146},{"data":{"text":"\n\/\/ KVO\n[RACObserve(self, username) subscribeNext:^(id x) {\n    NSLog(@\"成员变量 username 被修改成了：%@\", x);\n}];\n\n\/\/ target-action\nself.button.rac_command = [[RACCommand alloc] initWithSignalBlock:\n^RACSignal *(id input) {\n    NSLog(@\"按钮被点击\");\n    return [RACSignal empty];\n}];\n\n\/\/ Notification\n[NSNotificationCenter.defaultCenter addObserver:self \n        selector:@selector(keyboardDidChangeFrameNotificationHandler:) \n        name:UIKeyboardDidChangeFrameNotification object:nil]; ","language":"objectivec","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"code","id":46044064},{"data":{"text":"AC的RACSignal 类也提供了createSignal方法来让用户创建自定义的信号，如下代码创建了一个下载指定网站内容的信号。","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031147},{"data":{"text":"ReactiveCocoa可以在iOS和OS X的应用开发中使用，对于iOS开发者，可以将RAC源码下载编译后，使用编译好的libReactiveCocoa-iOS.a文件。","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031148},{"data":{"text":"(RACSignal *)urlResults {\n    return [RACSignal createSignal:^RACDisposable *(id subscriber) {         NSError *error;         NSString *result = [NSString stringWithContentsOfURL:             [NSURL URLWithString:@\"http:\/\/www.devtang.com\"]              encoding:NSUTF8StringEncoding   error:&error];         NSLog(@\"download\");         if (!result) {             [subscriber sendError:error];         } else {             [subscriber sendNext:result];             [subscriber sendCompleted];         }         return [RACDisposable disposableWithBlock:^{             NSLog(@\"clean up\");         }];     }];  }","language":"objectivec","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"code","id":46044065},{"data":{"text":"如何使用ReactiveCocoa","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":true,"t_indent":true}},"type":"headline","id":46031149},{"data":{"text":"ReactiveCocoa可以在iOS和OS X的应用开发中使用，对于iOS开发者，可以将RAC源码下载编译后，使用编译好的libReactiveCocoa-iOS.a文件。","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46044066},{"data":{"text":"开发者也可以用CocoaPods来设置目标工程对ReactiveCocoa的依赖，只需要编辑Podfile文件，增加如下内容即可：","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031150},{"data":{"text":"pod 'ReactiveCocoa', ‘2.0'","language":"bash","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"code","id":46044067},{"data":{"text":"ReactiveCocoa的特点","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":true,"t_indent":true}},"type":"headline","id":46031151},{"data":{"text":"RAC在应用中大量使用了block，由于Objective-C语言的内存管理是基于引用计数 的，为了避免循环引用问题，在block中如果要引用self，需要使用@weakify(self)和@strongify(self)来避免强引用。另外，在使用时应该注意block的嵌套层数，不恰当的滥用多层嵌套block可能给程序的可维护性带来灾难。","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031152},{"data":{"text":"RAC的编程方式和传统的MVC方式差异巨大，所以需要较长的学习时间。并且，业界内对于RAC并没有广泛应用，这造成可供参考的项目和教程比较欠缺。另外，RAC项目本身也还在快速演进当中，1.x版本和2.x版本API改动了许多，3.0版本也正在快速开发中，对它的使用也需要考虑后期的升级维护问题。","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031153},{"data":{"text":"作为一个iOS开发领域的新开源框架，ReactiveCocoa带来了函数式编程和响应式编程的思想，值得大家关注并且学习。","format":{"p_indent":false,"p_center":false,"p_quote":false,"p_align":"left","p_bold":false,"t_indent":false}},"type":"paragraph","id":46031154}],"title":"推荐文章 ： ReactiveCocoa - iOS开发的新框架"}