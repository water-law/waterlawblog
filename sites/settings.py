"""
Django settings for blog project.

Generated by 'django-admin startproject' using Django 1.11.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
import os
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '_(760jtp_nb7$!tb#fh6s-qcg#^1k2bnqljqk=w88jtr9a(wxl'

# SECURITY WARNING: don't run with debug turned on in production!
GITHUB = True  # github page + sqlite
ENABLED_SQLITE3 = False
WIN_LOCAL = False  # windows + pgsql
if GITHUB:
    class GithubDeployInformation:
        pgsql_address = ("", "")
        redis_address = ("127.0.0.1", "6379")

    def email_host_password():
        return "ix508ij"
    DEPLOY_INFO = deploy_info = GithubDeployInformation()
    DEBUG = True
    ENABLED_SQLITE3 = True
elif WIN_LOCAL:
    class WinDeployInformation:
        pgsql_address = ("127.0.0.1", "5432")
        redis_address = ("127.0.0.1", "6379")

    def email_host_password():
        return "ix508ij"
    DEPLOY_INFO = deploy_info = WinDeployInformation()
    DEBUG = True
else:
    from etc.deploy import create_deploy_information, email_host_password
    DEPLOY_INFO = deploy_info = create_deploy_information()
    DEBUG = deploy_info.debug

PGSQL_ADDRESS = deploy_info.pgsql_address

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'www.waterlaw.top', 'waterlaw.top']
REDIS_CONNECTION = "redis://{}:{}/0".format(*deploy_info.redis_address)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blogapi.apps.BlogapiConfig',
    'haystack',
    'blockchain.apps.BlockchainConfig',
    'blog.apps.BlogConfig',
    'webreader.apps.WebreaderConfig',
    'comment.apps.CommentConfig',
    'misaka.apps.MisakaConfig',
    'rest_framework',
    'rest_framework.authtoken',
]

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'blog.whoosh_cn_backend.WhooshEngine',
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    },
}
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 10
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
       'rest_framework.authentication.BasicAuthentication',
       'blogapi.authentication.ExpiringTokenAuthentication',
       # 'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
       'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAdminUser',
    ],
    'PAGE_SIZE': 10
}

REST_FRAMEWORK_TOKEN_EXPIRE_MINUTES = 60

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sites.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [BASE_DIR+"/templates", ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sites.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'ENGINE': 'django.db.backends.postgresql_psycopg2' if not ENABLED_SQLITE3 else 'django.db.backends.sqlite3',

        'NAME': 'blog' if not ENABLED_SQLITE3 else os.path.join(BASE_DIR, 'blog.db'),

        'USER': 'postgres',

        'PASSWORD': 'postgres',
        
        'HOST': PGSQL_ADDRESS[0],  # Your db host, set to empty string('') for default for localhost,  Not used with sqlite3

        'PORT': PGSQL_ADDRESS[1],  # Your db port, set to empty string('') for default, Not used with sqlite3
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 自定义用户认证
AUTH_USER_MODEL = 'blog.User'

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = (
    os.path.join(BASE_DIR, "static")
)

# 邮件设置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = "smtp.163.com"  # stmp 地址
EMAIL_PORT = 25
EMAIL_HOST_PASSWORD = email_host_password()  # 授权码
EMAIL_FROM = EMAIL_HOST_USER = SERVER_EMAIL = 'waterlawsuper@163.com'
EMAIL_USE_TLS = True

ADMINS = (('Misaka', 'water_law@163.com'),)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },  # 针对 DEBUG = True 的情况
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(pathname)s %(filename)s %(module)s %(funcName)s %(lineno)d: %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'verbose'
        },
        'file_handler': {
             'level': 'ERROR',
             'class': 'logging.handlers.TimedRotatingFileHandler',
             'filename': os.path.join(BASE_DIR, 'logs/file_handler.log'),
             'formatter': 'verbose'
        },  # 用于文件输出
        'console':{
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file_handler', 'console'],
            'level': 'DEBUG',
            'propagate': True  # 是否继承父类的log信息
        },  # handlers 来自于上面的 handlers 定义的内容
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
    }
}
